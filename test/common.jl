using FFTW
# TODO error test for interface functions
kG_2 = gen_kGrid("2Dsc-1.4",16)
kG_3 = gen_kGrid("3Dsc-1.4",16)
hexG = gen_kGrid("p6m-1.4",16)
@testset "convolutions" begin
    fek_2 = convert.(Complex{Float64},expandKArr(kG_2, kG_2.ϵkGrid))
    fek_3 = convert.(Complex{Float64},expandKArr(kG_3, kG_3.ϵkGrid))
    rek_2 = convert.(Complex{Float64},deepcopy(kG_2.ϵkGrid))
    rek_3 = convert.(Complex{Float64},deepcopy(kG_3.ϵkGrid))
    hex_rek = convert.(Complex{Float64},deepcopy(hexG.ϵkGrid))
    hex_fek = convert.(Complex{Float64},expandKArr(hexG, hexG.ϵkGrid))
    rek_2_2 = deepcopy(rek_2)
    rek_3_2 = deepcopy(rek_3)
    fft_rek_2 = fft(fek_2)
    fft_rek_3 = fft(fek_3)
    hex_rek_2 = deepcopy(hex_rek)
    hex_fft_rek = fft(hex_fek)
    t1_2 = zeros(Complex{Float64},length(kG_2.ϵkGrid))
    t1_3 = zeros(Complex{Float64},length(kG_3.ϵkGrid))
    t2_2 = zeros(Complex{Float64},length(kG_2.ϵkGrid))
    t2_3 = zeros(Complex{Float64},length(kG_3.ϵkGrid))
    hex_t1 = zeros(Complex{Float64},length(hexG.ϵkGrid))
    hex_t2 = zeros(Complex{Float64},length(hexG.ϵkGrid))
    r1_2 = conv(kG_2, rek_2, rek_2_2)
    r1_3 = conv(kG_3, rek_3, rek_3_2)
    hex_r1= conv(hexG, hex_rek, hex_rek)
    conv!(kG_2, t1_2, rek_2, rek_2_2)
    conv!(kG_3, t1_3, rek_3, rek_3_2)
    conv!(hexG, hex_t1, hex_rek, hex_rek_2)
    @test all(r1_2 .≈ t1_2)
    @test all(r1_3 .≈ t1_3)
    @test all(hex_r1 .≈ hex_t1)

    r2_2 = conv_fft1(kG_2, rek_2, fft_rek_2)
    r2_3 = conv_fft1(kG_3, rek_3, fft_rek_3)
    conv_fft1!(kG_2, t2_2, rek_2, fft_rek_2)
    conv_fft1!(kG_3, t2_3, rek_3, fft_rek_3)
    @test all(r1_2 .≈ r2_2)
    @test all(r1_3 .≈ r2_3)
    @test all(r2_2 .≈ t2_2)
    @test all(r2_3 .≈ t2_3)
    r2_2 = conv_fft(kG_2, fft_rek_2, fft_rek_2)
    r2_3 = conv_fft(kG_3, fft_rek_3, fft_rek_3)
    conv_fft!(kG_2, t2_2, fft_rek_2, fft_rek_2)
    conv_fft!(kG_3, t2_3, fft_rek_3, fft_rek_3)
    @test all(r1_2 .≈ r2_2)
    @test all(r1_3 .≈ r2_3)
    @test all(r2_2 .≈ t2_2)
    @test all(r2_3 .≈ t2_3)
end
